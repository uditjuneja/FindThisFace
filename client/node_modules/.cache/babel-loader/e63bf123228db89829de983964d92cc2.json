{"ast":null,"code":"import _classCallCheck from \"C:\\\\Facial_landmark_detection_test-master\\\\stalkme_github_final\\\\stalkMe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Facial_landmark_detection_test-master\\\\stalkme_github_final\\\\stalkMe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Facial_landmark_detection_test-master\\\\stalkme_github_final\\\\stalkMe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Facial_landmark_detection_test-master\\\\stalkme_github_final\\\\stalkMe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Facial_landmark_detection_test-master\\\\stalkme_github_final\\\\stalkMe\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Facial_landmark_detection_test-master\\\\stalkme_github_final\\\\stalkMe\\\\client\\\\src\\\\FileUpload.js\";\nimport React, { Component } from 'react';\nimport { FilePond, File, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\nregisterPlugin(FilePondPluginFileValidateType);\n\nvar FileUpload =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FileUpload, _Component);\n\n  function FileUpload(props) {\n    var _this;\n\n    _classCallCheck(this, FileUpload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileUpload).call(this, props));\n    _this.state = {\n      files: []\n    };\n    return _this;\n  }\n\n  _createClass(FileUpload, [{\n    key: \"handleChange\",\n    value: function handleChange() {\n      this.props.onChange(this.props.id, this.state.files);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: 'center',\n          flex: '1',\n          minWidth: '45vw',\n          padding: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, this.props.id), React.createElement(FilePond, {\n        ref: function ref(_ref) {\n          return _this2.pond = _ref;\n        },\n        allowMultiple: true,\n        acceptedFileTypes: ['image/*'],\n        onupdatefiles: function onupdatefiles(fileItems) {\n          // Set current file objects to this.state\n          _this2.setState({\n            files: fileItems.map(function (fileItem) {\n              return fileItem.file;\n            })\n          });\n\n          _this2.handleChange();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, this.state.files.map(function (file, i) {\n        return React.createElement(File, {\n          key: i,\n          src: file,\n          origin: \"local\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return FileUpload;\n}(Component);\n\nexport default FileUpload;","map":{"version":3,"sources":["C:\\Facial_landmark_detection_test-master\\stalkme_github_final\\stalkMe\\client\\src\\FileUpload.js"],"names":["React","Component","FilePond","File","registerPlugin","FilePondPluginFileValidateType","FileUpload","props","state","files","onChange","id","textAlign","flex","minWidth","padding","ref","pond","fileItems","setState","map","fileItem","file","handleChange","i"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,cAAzB,QAA+C,gBAA/C;AACA,OAAO,gCAAP;AACA,OAAOC,8BAAP,MAA2C,oCAA3C;AAEAD,cAAc,CAAEC,8BAAF,CAAd;;IAEMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,oFAAMA,KAAN;AACA,UAAKC,KAAL,GAAW;AACTC,MAAAA,KAAK,EAAC;AADG,KAAX;AAFgB;AAKjB;;;;mCAEc;AACb,WAAKF,KAAL,CAAWG,QAAX,CAAoB,KAAKH,KAAL,CAAWI,EAA/B,EAAkC,KAAKH,KAAL,CAAWC,KAA7C;AACD;;;6BAEQ;AAAA;;AACP,aACI;AAAK,QAAA,KAAK,EAAE;AAACG,UAAAA,SAAS,EAAC,QAAX;AAAoBC,UAAAA,IAAI,EAAE,GAA1B;AAA8BC,UAAAA,QAAQ,EAAC,MAAvC;AAA8CC,UAAAA,OAAO,EAAC;AAAtD,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKR,KAAL,CAAWI,EAAhB,CADJ,EAEI,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAE,aAAAK,IAAG;AAAA,iBAAI,MAAI,CAACC,IAAL,GAAYD,IAAhB;AAAA,SAAlB;AACI,QAAA,aAAa,EAAE,IADnB;AAEI,QAAA,iBAAiB,EAAE,CAAC,SAAD,CAFvB;AAGI,QAAA,aAAa,EAAE,uBAACE,SAAD,EAAe;AAC9B;AACI,UAAA,MAAI,CAACC,QAAL,CAAc;AACVV,YAAAA,KAAK,EAAES,SAAS,CAACE,GAAV,CAAc,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAb;AAAA,aAAtB;AADG,WAAd;;AAGA,UAAA,MAAI,CAACC,YAAL;AACH,SATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaK,KAAKf,KAAL,CAAWC,KAAX,CAAiBW,GAAjB,CAAqB,UAACE,IAAD,EAAME,CAAN;AAAA,eAClB,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEA,CAAX;AAAc,UAAA,GAAG,EAAEF,IAAnB;AAAyB,UAAA,MAAM,EAAC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADkB;AAAA,OAArB,CAbL,CAFJ,CADJ;AAwBD;;;;EArCsBrB,S;;AAwCzB,eAAeK,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport { FilePond, File, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\n\nregisterPlugin( FilePondPluginFileValidateType);\n\nclass FileUpload extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      files:[]\n    }\n  }\n\n  handleChange() {\n    this.props.onChange(this.props.id,this.state.files);\n  }\n\n  render() {\n    return (\n        <div style={{textAlign:'center',flex: '1',minWidth:'45vw',padding:15}}>\n            <h1>{this.props.id}</h1>\n            <FilePond ref={ref => this.pond = ref}\n                allowMultiple={true}\n                acceptedFileTypes={['image/*']}\n                onupdatefiles={(fileItems) => {\n                // Set current file objects to this.state\n                    this.setState({\n                        files: fileItems.map(fileItem => fileItem.file)\n                    });\n                    this.handleChange()                \n                }}\n                >\n                \n                {/* Update current files  */}\n                {this.state.files.map((file,i) => (\n                    <File key={i} src={file} origin=\"local\" />\n                ))}\n                \n            </FilePond>\n        </div>\n        \n    );\n  }\n}\n\nexport default FileUpload;\n"]},"metadata":{},"sourceType":"module"}