{"version":3,"sources":["FileUpload.js","DisplayResult.js","App.js","serviceWorker.js","index.js"],"names":["registerPlugin","FilePondPluginFileValidateType","FileUpload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","files","onChange","id","_this2","react_default","a","createElement","style","textAlign","flex","minWidth","padding","react_filepond","ref","pond","allowMultiple","acceptedFileTypes","onupdatefiles","fileItems","setState","map","fileItem","file","handleChange","i","key","src","origin","Component","DisplayResult","results","result","rollno","name","App","onOpenModal","open","onCloseModal","initialState","image","email","width","year","processing","handleFieldChange","bind","assertThisInitialized","renderFileUpload","handleSubmit","fileUpload","handleEmailChange","handleWidthChange","fieldId","value","event","target","k","src_FileUpload","preventDefault","then","response","data","console","log","formData","FormData","append","split","pop","post","headers","content-type","_this3","backgroundColor","backgroundSize","paddingBottom","paddingTop","styles","glowingText","form","label","type","objectSpread","input","required","onSubmit","method","button","src_DisplayResult","index_es","onClose","onExited","center","fontFamily","fontSize","marginTop","display","flexDirection","justifyContent","flexWrap","border","borderBottom","margin","fontStyle","background","color","borderRadius","marginLeft","cursor","textShadow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c39c40d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FilePond, File, registerPlugin } from 'react-filepond';\r\nimport 'filepond/dist/filepond.min.css';\r\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\r\n\r\nregisterPlugin( FilePondPluginFileValidateType);\r\n\r\nclass FileUpload extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      files:[]\r\n    }\r\n  }\r\n\r\n  handleChange() {\r\n    this.props.onChange(this.props.id,this.state.files);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div style={{textAlign:'center',flex: '1',minWidth:'45vw',padding:15}}>\r\n           \r\n            <FilePond ref={ref => this.pond = ref}\r\n                allowMultiple={false}\r\n                acceptedFileTypes={['image/*']}\r\n                onupdatefiles={(fileItems) => {\r\n                // Set current file objects to this.state\r\n                    this.setState({\r\n                        files: fileItems.map(fileItem => fileItem.file)\r\n                    });\r\n                    this.handleChange()                \r\n                }}\r\n                >\r\n                \r\n                {/* Update current files  */}\r\n                {this.state.files.map((file,i) => (\r\n                    <File key={i} src={file} origin=\"local\" />\r\n                ))}\r\n                \r\n            </FilePond>\r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default FileUpload;\r\n","import React, { Component } from 'react';\r\n\r\nclass DisplayResult extends Component{\r\n\r\n    render(){\r\n        return    this.props.results.map((result)=>(\r\n            <li key={result.rollno}>  {result.name} : {result.rollno}\r\n            </li>\r\n                ));\r\n                \r\n                \r\n        \r\n    \r\n    }\r\n}\r\nexport default DisplayResult;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport FileUpload from './FileUpload'\r\nimport  { post } from 'axios';\r\n//import bg from './images/backgroundImage.png'\r\nimport Modal from \"react-responsive-modal\";\r\nimport DisplayResult from './DisplayResult'\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.initialState={\r\n      image:[],\r\n      email:'',\r\n      width:50,\r\n      open:false,\r\n      results:[{name:'NAN',rollno:'NAN'}],\r\n      year:'second',\r\n      processing:'Idle  ... zzz'\r\n     \r\n    }\r\n    this.state = this.initialState;\r\n    this.handleFieldChange = this.handleFieldChange.bind(this);\r\n    this.renderFileUpload = this.renderFileUpload.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.fileUpload = this.fileUpload.bind(this);\r\n    this.handleEmailChange = this.handleEmailChange.bind(this);\r\n    this.handleWidthChange = this.handleWidthChange.bind(this);\r\n    this.onOpenModal=this.onOpenModal.bind(this);\r\n    this.onCloseModal=this.onCloseModal.bind(this);\r\n\r\n  }\r\n  onOpenModal = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  onCloseModal = () => {\r\n    this.setState({ open: false });\r\n  };\r\n  handleFieldChange(fieldId, value) {\r\n    this.setState({image:value});  \r\n  }\r\n\r\n  handleEmailChange(event){\r\n    this.setState({email:event.target.value})\r\n  }\r\n  handleWidthChange(event){\r\n    this.setState({width:event.target.value})\r\n  }\r\n\r\n\r\n  renderFileUpload(k){\r\n    return (\r\n       <FileUpload\r\n            id={k}\r\n            onChange={this.handleFieldChange}\r\n        />      \r\n    )\r\n  }\r\n  handleSubmit(event) {\r\n    //console.log(this.state);\r\n    event.preventDefault();\r\n    this.setState({\r\n   \r\n      processing:'Processing  ...'\r\n    });\r\n\r\n    //this.onOpenModal();\r\n   \r\n    \r\n\r\n    this.fileUpload().then((response)=>{\r\n      this.setState({\r\n        results:response.data,\r\n        processing:'Done !!'\r\n      });\r\n      \r\n      console.log('Response is: \\n'+ response.data);\r\n      //return this.readcsvfile();\r\n      })\r\n  }\r\n\r\n  fileUpload(){\r\n    const url = '/submit';\r\n    const formData = new FormData();\r\n    formData.append('email',this.state.email);\r\n    formData.append('width',this.state.width);\r\n    formData.append('fileExt',this.state.image[0].name.split('.').pop())    \r\n    formData.append('files',this.state.image[0])\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data'\r\n        }\r\n    }\r\n    return  post(url, formData,config)\r\n  }\r\n  // readcsvfile(){\r\n  //   let reader=new FileReader();\r\n  //   reader.readAsText(\"./result_csv.csv\");\r\n  //   console.log('reader',reader);\r\n  // }\r\n// readcsvfile(){\r\n//   var csvFilePath = require(\"./result_csv.csv\");\r\n//   console.log('i am in readcsv');\r\n//   Papa.parse(csvFilePath, {\r\n//     header: true,\r\n//     download: true,\r\n//     skipEmptyLines: true,\r\n//     // Here this is also available. So we can call our custom class method\r\n//     complete: this.updatecsvdata\r\n//   });\r\n// }\r\n  // updatecsvdata(result) {\r\n  //   console.log(result);\r\n  //   var data = result.data;\r\n  //   this.setState({\r\n  //     results:data\r\n  //   });\r\n  // }\r\n  \r\n  render() { \r\n    return (\r\n      <div style={{textAlign:'center',backgroundColor:'white',backgroundSize:'cover',paddingBottom:100,paddingTop:50}}>\r\n        <div style={styles.glowingText}>\r\n            Find this Face\r\n        </div>\r\n               \r\n        \r\n        <div style={styles.form}>\r\n                {this.renderFileUpload('Upload Image')} <br/>\r\n      \r\n         \r\n          \r\n          <label style={styles.label}>Tolerance : </label> \r\n          <input type=\"number\" value={this.state.width} onChange={this.handleWidthChange} style={{...styles.input,...{width:120}}} required={true}/><pr>%</pr>\r\n       \r\n         <p> (the more it is , more is the number of predicted results)</p>\r\n          <form onSubmit={this.handleSubmit} method='post'>\r\n            <label style={styles.label}>your_name: </label>\r\n            <input type=\"text\" value={this.state.email} onChange={this.handleEmailChange} style={styles.input} required={true}/><pr>(No Spaces)</pr>\r\n            <br/><br/>\r\n            <b> Developed By : Prayag Lehana</b><br/><br/>\r\n            <button  type=\"submit\" style={styles.button}>\r\n              Find Matches\r\n            </button><br/>\r\n            <label>State : {this.state.processing}</label><br/>\r\n            <label> Matches Found With </label>\r\n            \r\n            <DisplayResult results={this.state.results}/>\r\n            \r\n     \r\n        </form>\r\n        </div>\r\n   \r\n        <Modal \r\n              open={this.state.open} \r\n              onClose={this.onCloseModal} \r\n              onExited = {()=> this.setState(this.initialState)}\r\n              center>\r\n              <div\r\n                style={{\r\n                  fontFamily:'roboto',\r\n                  fontSize:20,\r\n                  marginTop:50\r\n                }}\r\n              >Hey {this.state.email}, Thank you for using our web service</div>\r\n              <div style={{\r\n                    display:'flex',flexDirection:'row',justifyContent:'space-evenly',\r\n                    paddingTop:50,flexWrap:'wrap'\r\n                }}>\r\n                </div>\r\n            </Modal> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  input:{\r\n    border:'none',\r\n    borderBottom:'1px dashed #83A4C5',\r\n    margin:'10px 3px',    \r\n    fontStyle:'italic',\r\n    width:250,\r\n    background:'transparent',\r\n    fontFamily:'roboto',\r\n    fontSize:20,\r\n    color:'#1e1e1e'\r\n  },\r\n  label:{\r\n    fontSize:20,\r\n    fontFamily:'roboto'\r\n  },\r\n  button:{\r\n    padding:'7px 30px',\r\n    fontFamily:'roboto',\r\n    borderRadius:'10px',\r\n    marginLeft:'5px',\r\n    fontSize:15,\r\n    margin:'10px 3px',\r\n    cursor:'pointer',\r\n  },\r\n  form:{\r\n    background:'rgb(255,255,255,0.7)',\r\n    paddingTop:30,\r\n    paddingBottom:30,\r\n    margin:'0 10px',\r\n    borderRadius:10\r\n  },\r\n  glowingText:{\r\n    color:'rgb(99, 54, 38)',\r\n    background: '#333333',\r\n    textShadow:'0 -1px 4px #FFF, 0 -2px 10px #ff0, 0 -10px 20px #ff8000, 0 -18px 40px #F00',\r\n    fontFamily:'roboto',\r\n    fontSize:50,\r\n    margin:30,\r\n    padding:30,\r\n    borderRadius:10\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}